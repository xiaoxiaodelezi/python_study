#更改数组的形状

import numpy as np

#数组的形状决定于给定的数轴参数

rg=np.random.default_rng(1)
a=np.floor(10*rg.random((3,4)))
print(a)
# [[5. 9. 1. 9.]
#  [3. 4. 8. 4.]
#  [5. 0. 7. 5.]]

print(a.shape)
#(3, 4)

#数组的形状可以通过很多命令转变。接下来的三个命令都可以返回修改后的数组，不过不会改变原数组
print(a.ravel()) #返回一个一维数组，包含全部元素
#[5. 9. 1. 9. 3. 4. 8. 4. 5. 0. 7. 5.]

print(a.reshape(6,2))
# [[5. 9.]
#  [1. 9.]
#  [3. 4.]
#  [8. 4.]
#  [5. 0.]
#  [7. 5.]]

print(a.T) #转置
# [[5. 3. 5.]
#  [9. 4. 0.]
#  [1. 8. 7.]
#  [9. 4. 5.]]

print(a.T.shape)
# (4, 3)
print(a.shape)
# (3, 4)

#扁平化后的数组数据一般是“c风格”的，这也就意味着最右侧的索引最快变化，也就是
#a[0,0]后一个元素是a[0,1]。如果数组被重新塑形，还是会被以C风格来处理。
# numpy通常会创建数组来存储这些顺序，所以ravel通常不会复制原元素，不过如果数组是通过其他数组的切片，
# 或者通过一个非传统方式创建，numpy或许会需要复制。ravel和reshape函数都可以使用可选参数，比如使用
# FORTRAN-style，会使得最左边的参数最快改变。

print(a)
# [[5. 9. 1. 9.]
#  [3. 4. 8. 4.]
#  [5. 0. 7. 5.]]


a.resize((2,6)) #a改变了
print(a)
# [[5. 9. 1. 9. 3. 4.]
#  [8. 4. 5. 0. 7. 5.]]

#塑形函数如果维度参数被设定成-1，则这个维度会被自动定义
print(a.reshape((3,-1))) #a没有被改变，resize和reshape的区别
# [[5. 9. 1. 9.]
#  [3. 4. 8. 4.]
#  [5. 0. 7. 5.]]


# 其他函数
# ndarry
# shape
# reshape
# resize
# ravel
