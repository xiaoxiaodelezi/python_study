#索引，切片和迭代

import numpy as np

#一维的数组可以被索引，切片和迭代，和python的列表类似

a=np.arange(10)**3

print(a)
#[  0   1   8  27  64 125 216 343 512 729]

print(a[2])
#2

print(a[2:5])
#[2 3 4]

a[:6:2]=1000 #相当于0:6:2 start:end(exclusive):step
print(a)
#[1000    1 1000   27 1000  125  216  343  512  729]

print(a[::-1])
#[ 729  512  343  216  125 1000   27 1000    1 1000]

for i in a: #类似list的使用
    print(i**(1/3))
# 9.999999999999998
# 1.0
# 9.999999999999998
# 3.0
# 9.999999999999998
# 4.999999999999999
# 5.999999999999999
# 6.999999999999999
# 7.999999999999999
# 8.999999999999998


#多维的数组每个轴都有一个索引。这些索引通过一个用逗号隔开的元组来表示

def f(x,y):
    return 10*x+y

b=np.fromfunction(f,(5,4),dtype=int) #相当于x的(0,5)嵌套y的(0,4)
print(b)
# [[ 0  1  2  3]
#  [10 11 12 13]
#  [20 21 22 23]
#  [30 31 32 33]
#  [40 41 42 43]]

print(b[2,3]) #b[横轴切片，竖轴切片]
#23

print(b[0:5,1])
# [ 1 11 21 31 41]

print(b[:,1])
#[ 1 11 21 31 41]

print(b[1:3,:])
# [[10 11 12 13]
#  [20 21 22 23]]


#当给的参数比轴数少的时候，缺失的部分将会被认为是全部切片
print(b[-1]) #相当于[1:2,:]
# [40 41 42 43]


#b[i]相当于i，后面的轴部分全部都是:。numpy也可以使用点来代替，类似b[i,...]
# 点...表示需要完整整个数组所需要的维度。比如，如果x有5个轴，那么
# x[1,2,...] 相当于x[1,2,:,:,:]
# x[...,3] 相当于x[:,:,:,:,3]
# x[4,...,5,:]相当于x[4,:.:,5,:]

c=np.array([[[0,1,2],
             [10,12,13]],
            [[100,101,102],
             [110,112,113]]])
print(c.shape)
#(2, 2, 3)


print(c[1,...])
# [[100 101 102]
#  [110 112 113]]

print(c[...,2])
# [[  2  13]
#  [102 113]]

#迭代 过多维数组将会以第一个轴的方式进行 #最shape左边的数字是第一个轴
for row in b:
    print(row)
# [0 1 2 3]
# [10 11 12 13]
# [20 21 22 23]
# [30 31 32 33]
# [40 41 42 43]

#但是，如果有人想展示所有的元素，这是可以使用flat属性，这个属性是一个迭代器，展示所有元素
for element in b.flat:
    print(element)
# 0
# 1
# 2
# 3
# 10
# 11
# 12
# 13
# 20
# 21
# 22
# 23
# 30
# 31
# 32
# 33
# 40
# 41
# 42
# 43


# 相关函数
# Indexing
# Indexing(reference)
# newaxis
# ndenumerate
# indices

